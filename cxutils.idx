RpointInt	cxutils.html#RpointInt	cxutils: RpointInt	
RpointFloat	cxutils.html#RpointFloat	cxutils: RpointFloat	
fibi	cxutils.html#fibi,int	cxutils: fibi(n: int): uint64	
pswwaux	cxutils.html#pswwaux	cxutils: pswwaux()	
cxCpuInfo	cxutils.html#cxCpuInfo	cxutils: cxCpuInfo(): string	
cxVideoInfo	cxutils.html#cxVideoInfo	cxutils: cxVideoInfo(): string	
showCpuCores	cxutils.html#showCpuCores	cxutils: showCpuCores()	
getAmzDateString	cxutils.html#getAmzDateString	cxutils: getAmzDateString(): string	
getUserName	cxutils.html#getUserName	cxutils: getUserName(): string	
getPassword	cxutils.html#getPassword,int64	cxutils: getPassword(ahash: int64 = 0&apos;i64): string	
cxDayOfWeek	cxutils.html#cxDayOfWeek,string	cxutils: cxDayOfWeek(datestr: string): string	
getNextMonday	cxutils.html#getNextMonday,string	cxutils: getNextMonday(adate: string): string	
getRandomPointInCircle	cxutils.html#getRandomPointInCircle,float	cxutils: getRandomPointInCircle(radius: float): seq[float]	
getRandomPoint	cxutils.html#getRandomPoint,float,float,float,float	cxutils: getRandomPoint(minx: float = -500.0; maxx: float = 500.0; miny: float = -500.0;\n               maxy: float = 500.0): RpointFloat	
getRandomPoint	cxutils.html#getRandomPoint,int,int,int,int	cxutils: getRandomPoint(minx: int = -500; maxx: int = 500; miny: int = -500; maxy: int = 500): RpointInt	
getPointInSphere	cxutils.html#getPointInSphere	cxutils: getPointInSphere(): auto	
randpos	cxutils.html#randpos	cxutils: randpos(): int	
getCard	cxutils.html#getCard.t	cxutils: getCard(): auto	
showRandomCard	cxutils.html#showRandomCard,int	cxutils: showRandomCard(xpos: int = centerX())	
showRuler	cxutils.html#showRuler,int,int,int,string,BackgroundColor,bool	cxutils: showRuler(xpos: int = 0; xposE: int = 0; ypos: int = 0; fgr: string = white;\n          bgr: BackgroundColor = bgBlack; vert: bool = false)	
centerMark	cxutils.html#centerMark,bool	cxutils: centerMark(showpos: bool = false)	
superHeader	cxutils.html#superHeader,string	cxutils: superHeader(bstring: string)	
superHeader	cxutils.html#superHeader,string,string,string	cxutils: superHeader(bstring: string; strcol: string; frmcol: string)	
newWordCJK	cxutils.html#newWordCJK,int,int	cxutils: newWordCJK(minwl: int = 3; maxwl: int = 10): string	
newWord	cxutils.html#newWord,int,int	cxutils: newWord(minwl: int = 3; maxwl: int = 10): string	
newWord2	cxutils.html#newWord2,int,int	cxutils: newWord2(minwl: int = 3; maxwl: int = 10): string	
newWord3	cxutils.html#newWord3,int,int,bool	cxutils: newWord3(minwl: int = 3; maxwl: int = 10; nflag: bool = true): string	
newHiragana	cxutils.html#newHiragana,int,int	cxutils: newHiragana(minwl: int = 3; maxwl: int = 10): string	
newKatakana	cxutils.html#newKatakana,int,int	cxutils: newKatakana(minwl: int = 3; maxwl: int = 10): string	
newText	cxutils.html#newText,int,string	cxutils: newText(textLen: int = 1000; textgen: string = &quot;newWord&quot;): string	
rndStr	cxutils.html#rndStr,int	cxutils: rndStr(n: int = 20): string	
createRandomDataFile	cxutils.html#createRandomDataFile,string	cxutils: createRandomDataFile(filename: string = &quot;randomdata.dat&quot;)	
drawRect	cxutils.html#drawRect,int,int,string,string,string,string,int,bool,string	cxutils: drawRect(h: int = 0; w: int = 3; frhLine: string = &quot;_&quot;; frVLine: string = &quot;|&quot;;\n         frCol: string = darkgreen; dotCol: string = truetomato; xpos: int = 1;\n         blink: bool = false; dottype: string = &quot;.&quot;)	
cxBinomialCoeff	cxutils.html#cxBinomialCoeff,int,int	cxutils: cxBinomialCoeff(n, k: int): int	
bitCheck	cxutils.html#bitCheck.t,untyped,untyped	cxutils: bitCheck(a, b: untyped): bool	
createSeqAll	cxutils.html#createSeqAll,int,int	cxutils: createSeqAll(min: int = 0; max: int = 40878): seq[string]	
createSeqGeoshapes	cxutils.html#createSeqGeoshapes	cxutils: createSeqGeoshapes(): seq[string]	
createSeqHiragana	cxutils.html#createSeqHiragana	cxutils: createSeqHiragana(): seq[string]	
createSeqKatakana	cxutils.html#createSeqKatakana	cxutils: createSeqKatakana(): seq[string]	
createSeqCJK	cxutils.html#createSeqCJK	cxutils: createSeqCJK(): seq[string]	
createSeqFractur	cxutils.html#createSeqFractur	cxutils: createSeqFractur(): seq[string]	
createSeqIching	cxutils.html#createSeqIching	cxutils: createSeqIching(): seq[string]	
createSeqApl	cxutils.html#createSeqApl	cxutils: createSeqApl(): seq[string]	
createSeqBoxChars	cxutils.html#createSeqBoxChars	cxutils: createSeqBoxChars(): seq[string]	
boxy	cxutils.html#boxy,int,int,int	cxutils: boxy(w: int = 20; h: int = 5; fgr = randcol(); xpos: int = 1)	
boxy2	cxutils.html#boxy2,int,int,int	cxutils: boxy2(w: int = 20; h: int = 5; fgr = randcol(); xpos: int = 1)	
spiralBoxy	cxutils.html#spiralBoxy,int,int,int	cxutils: spiralBoxy(w: int = 20; h: int = 20; xpos: int = 1)	
spiralBoxy2	cxutils.html#spiralBoxy2,int,int,int	cxutils: spiralBoxy2(w: int = 20; h: int = 20; xpos: int = 1)	
showSeq	cxutils.html#showSeq,seq[T][T],string,int,int,bool	cxutils: showSeq[T](z: seq[T]; fgr: string = truetomato; cols = 6; maxitemwidth: int = 5;\n           displayflag: bool = true): string	
seqHighLite	cxutils.html#seqHighLite,seq[T][T],seq[T][T],string	cxutils: seqHighLite[T](b: seq[T]; b1: seq[T]; col: string = gold)	
shift	cxutils.html#shift,seq[T][T],Natural	cxutils: shift[T](x: var seq[T]; zz: Natural = 0): T	
reverseIter	cxutils.html#reverseIter.i,openArray[T]	cxutils: reverseIter[T](a: openArray[T]): T	
withFile	cxutils.html#withFile.t,untyped,untyped,untyped,untyped	cxutils: withFile(f, fn, mode, actions: untyped): untyped	
checkMemFull	cxutils.html#checkMemFull,int	cxutils: checkMemFull(xpos: int = 2)	
checkMem	cxutils.html#checkMem,int	cxutils: checkMem(xpos: int = 2)	
fullgcstats	cxutils.html#fullgcstats,int	cxutils: fullgcstats(xpos: int = 2): int	
memCheck	cxutils.html#memCheck,bool	cxutils: memCheck(stats: bool = false)	
distanceTo	cxutils.html#distanceTo,,	cxutils: distanceTo(origin: (float, float); dest: (float, float)): float	
getEmojisSmall	cxutils.html#getEmojisSmall	cxutils: getEmojisSmall(): seq[string]	
showEmojisSmall	cxutils.html#showEmojisSmall	cxutils: showEmojisSmall()	
genMacAddress	cxutils.html#genMacAddress	cxutils: genMacAddress(): string	
quickPw	cxutils.html#quickPw	cxutils: quickPw(): string	
quickLargeInt	cxutils.html#quickLargeInt	cxutils: quickLargeInt(): string	
quickBinaryString	cxutils.html#quickBinaryString,int	cxutils: quickBinaryString(width: int = 10): string	
span	cxutils.html#span.i,string,int,BackwardsIndex	cxutils: span(s: string; first: int; last: BackwardsIndex): char	
checkPrime	cxutils.html#checkPrime,int	cxutils: checkPrime(a: int): bool	
primey	cxutils.html#primey.i,int,int	cxutils: primey(s: int = 0; e: int): int	
getPrimeSeq	cxutils.html#getPrimeSeq,int,int	cxutils: getPrimeSeq(x, y: int): seq[int]	
