styledEchoPrint	cxglobal.html#styledEchoPrint.m,varargs[untyped]	cxglobal: styledEchoPrint(m: varargs[untyped]): typed	
procName	cxglobal.html#procName.m,untyped	cxglobal: procName(x: untyped): untyped	
toEnum	cxglobal.html#toEnum.m,static[string]	cxglobal: toEnum(words: static[string]): untyped	
cxgetType	cxglobal.html#cxgetType.m,typed	cxglobal: cxgetType(s: typed): untyped	
tupleTypes	cxglobal.html#tupleTypes	cxglobal: tupleTypes(atuple: tuple): seq[string]	
unidecodeU	cxglobal.html#unidecodeU.t,untyped	cxglobal: unidecodeU(ustring: untyped): untyped	
`*`	cxglobal.html#*.t,string,int	cxglobal: `*`(s: string; n: int): untyped	
toki	cxglobal.html#toki.t,untyped	cxglobal: toki(s: untyped): untyped	
newLine	cxglobal.html#newLine,int	cxglobal: newLine(n: int = 1): string	
cxtoLower	cxglobal.html#cxtoLower,char	cxglobal: cxtoLower(c: char): char	
toTwInt	cxglobal.html#toTwInt.c,cushort	cxglobal: toTwInt(x: cushort): int	
isNumeric	cxglobal.html#isNumeric,string	cxglobal: isNumeric(s: string): bool	
getTerminalWidth	cxglobal.html#getTerminalWidth	cxglobal: getTerminalWidth(): int	
tw	cxglobal.html#tw.t	cxglobal: tw(): int	
getTerminalHeight	cxglobal.html#getTerminalHeight	cxglobal: getTerminalHeight(): int	
th	cxglobal.html#th.t	cxglobal: th(): int	
remapIntToFloat	cxglobal.html#remapIntToFloat,seq[T][int]	cxglobal: remapIntToFloat(s: seq[int]): seq[float]	
remapFloatToInt	cxglobal.html#remapFloatToInt,seq[T][float]	cxglobal: remapFloatToInt(s: seq[float]): seq[int]	
remapToString	cxglobal.html#remapToString,seq[T][T]	cxglobal: remapToString[T](s: seq[T]): seq[string]	
fastWrite	cxglobal.html#fastWrite,File,string	cxglobal: fastWrite(f: File; s: string)	
cxpad	cxglobal.html#cxpad,string,int,string	cxglobal: cxpad(s: string; padlen: int; paddy: string = spaces(1)): string	
cxpdx	cxglobal.html#cxpdx,int,string,string	cxglobal: cxpdx(padLen: int; s: string; paddy: string = spaces(1)): string	
cxlpad	cxglobal.html#cxlpad,string,int,string	cxglobal: cxlpad(s: string; padlen: int; paddy: string = spaces(1)): string	
cxlpdx	cxglobal.html#cxlpdx,int,string,string	cxglobal: cxlpdx(padLen: int; s: string; paddy: string = spaces(1)): string	
waitOn	cxglobal.html#waitOn,int	cxglobal: waitOn(alen: int = 1)	
rndSample	cxglobal.html#rndSample,seq[T][T]	cxglobal: rndSample[T](asq: seq[T]): T	
rndRGB	cxglobal.html#rndRGB	cxglobal: rndRGB(): auto	
sum	cxglobal.html#sum,seq[T][T]	cxglobal: sum[T](aseq: seq[T]): T	
product	cxglobal.html#product,seq[T][T]	cxglobal: product[T](aseq: seq[T]): T	
doSomething	cxglobal.html#doSomething.t,int,untyped	cxglobal: doSomething(secs: int; body: untyped)	
isBlank	cxglobal.html#isBlank,string	cxglobal: isBlank(val: string): bool	
isEmpty	cxglobal.html#isEmpty,string	cxglobal: isEmpty(val: string): bool	
getRndInt	cxglobal.html#getRndInt,int,int	cxglobal: getRndInt(mi: int = 0; ma: int = int.high): int	
getRndBool	cxglobal.html#getRndBool	cxglobal: getRndBool(): bool	
getRandomSignI	cxglobal.html#getRandomSignI	cxglobal: getRandomSignI(): int	
getRandomSignF	cxglobal.html#getRandomSignF	cxglobal: getRandomSignF(): float	
reverseMe	cxglobal.html#reverseMe,openArray[T]	cxglobal: reverseMe[T](xs: openArray[T]): seq[T]	
reverseText	cxglobal.html#reverseText,string	cxglobal: reverseText(text: string): string	
reverseString	cxglobal.html#reverseString,string	cxglobal: reverseString(text: string): string	
createSeqBool	cxglobal.html#createSeqBool,int	cxglobal: createSeqBool(n: int = 10): seq[bool]	
createSeqBinary	cxglobal.html#createSeqBinary,int	cxglobal: createSeqBinary(n: int = 10): seq[int]	
createSeqInt	cxglobal.html#createSeqInt,int,int,int	cxglobal: createSeqInt(n: int = 10; mi: int = 0; ma: int = 1000): seq[int]	
ff	cxglobal.html#ff,float,int	cxglobal: ff(zz: float; n: int = 5): string	
ff22	cxglobal.html#ff22,int,int	cxglobal: ff22(zz: int; n: int = 0): string	
typeTest33	cxglobal.html#typeTest33,T	cxglobal: typeTest33[T](x: T): string	
ff2	cxglobal.html#ff2,SomeNumber,int	cxglobal: ff2(zz: SomeNumber; n: int = 3): string	
getRandomFloat	cxglobal.html#getRandomFloat,float,float	cxglobal: getRandomFloat(mi: float = -1.0; ma: float = 1.0): float	
getRndFloat	cxglobal.html#getRndFloat,float,float	cxglobal: getRndFloat(mi: float = -1.0; ma: float = 1.0): float	
createSeqFloat	cxglobal.html#createSeqFloat,int,int	cxglobal: createSeqFloat(n: int = 10; prec: int = 3): seq[float]	
seqLeft	cxglobal.html#seqLeft,seq[T][T],int	cxglobal: seqLeft[T](it: seq[T]; n: int): seq[T]	
seqRight	cxglobal.html#seqRight,seq[T][T],int	cxglobal: seqRight[T](it: seq[T]; n: int): seq[T]	
cxIsDigit	cxglobal.html#cxIsDigit,string,char	cxglobal: cxIsDigit(s: string; sep: char = &apos;.&apos;): bool	
fmtx	cxglobal.html#fmtx,openArray[string],varargs[T,]	cxglobal: fmtx[T](fmts: openArray[string]; fstrings: varargs[T, `$`]): string	
showRune	cxglobal.html#showRune,string	cxglobal: showRune(s: string): string	
unquote	cxglobal.html#unquote,string	cxglobal: unquote(s: string): string	
cleanScreen	cxglobal.html#cleanScreen	cxglobal: cleanScreen()	
centerX	cxglobal.html#centerX	cxglobal: centerX(): int	
centerPos	cxglobal.html#centerPos,string	cxglobal: centerPos(astring: string)	
colPaletteName	cxglobal.html#colPaletteName.t,string,int	cxglobal: colPaletteName(coltype: string; n: int): auto	
aPaletteSample	cxglobal.html#aPaletteSample.t,string	cxglobal: aPaletteSample(coltype: string): int	
paletix	cxglobal.html#paletix.t,string	cxglobal: paletix(pl: string): untyped	
randCol2	cxglobal.html#randCol2.t,string	cxglobal: randCol2(coltype: string): auto	
randCol	cxglobal.html#randCol.t	cxglobal: randCol(): string	
rndCol	cxglobal.html#rndCol.t,int,int,int	cxglobal: rndCol(r: int = getRndInt(0, 254); g: int = getRndInt(0, 254); b: int = getRndInt(0, 254)): string	
cxHorizontal	cxglobal.html#cxHorizontal	CxLineType.cxHorizontal	
cxVertical	cxglobal.html#cxVertical	CxLineType.cxVertical	
CxLineType	cxglobal.html#CxLineType	cxglobal: CxLineType	
CxlineText	cxglobal.html#CxlineText	cxglobal: CxlineText	
Cxline	cxglobal.html#Cxline	cxglobal: Cxline	
newCxlineText	cxglobal.html#newCxlineText	cxglobal: newCxlineText(): CxlineText	
newCxLine	cxglobal.html#newCxLine	cxglobal: newCxLine(): Cxline	
fastsplit	cxglobal.html#fastsplit,string,char	cxglobal: fastsplit(s: string; sep: char): seq[string]	
splitty	cxglobal.html#splitty,string,string	cxglobal: splitty(txt: string; sep: string): seq[string]	
doFlag	cxglobal.html#doFlag,string,int,T,string	cxglobal: doFlag[T](flagcol: string = yellowgreen; flags: int = 1; text: T = &quot;&quot;;\n          textcol: string = termwhite): string	
getAscii	cxglobal.html#getAscii,string	cxglobal: getAscii(s: string): seq[int]	
curUp	cxglobal.html#curUp.t,int	cxglobal: curUp(x: int = 1)	
curDn	cxglobal.html#curDn.t,int	cxglobal: curDn(x: int = 1)	
curBk	cxglobal.html#curBk.t,int	cxglobal: curBk(x: int = 1)	
curFw	cxglobal.html#curFw,int	cxglobal: curFw(x: int = 1): auto	
curSetx	cxglobal.html#curSetx.t,int	cxglobal: curSetx(x: int)	
curSet	cxglobal.html#curSet.t,int,int	cxglobal: curSet(x: int = 0; y: int = 0)	
clearup	cxglobal.html#clearup.t,int	cxglobal: clearup(x: int = 80)	
curMove	cxglobal.html#curMove,int,int,int,int	cxglobal: curMove(up: int = 0; dn: int = 0; fw: int = 0; bk: int = 0)	
curOn	cxglobal.html#curOn.t	cxglobal: curOn()	
curOff	cxglobal.html#curOff.t	cxglobal: curOff()	
stripper	cxglobal.html#stripper,string	cxglobal: stripper(str: string): string	
`&lt;&gt;`	cxglobal.html#<>.t,untyped,untyped	cxglobal: `&lt;&gt;`(a, b: untyped): untyped	
`[]`	cxglobal.html#[],seq[T][T],Slice[U]	cxglobal: `[]`[T; U](a: seq[T]; x: Slice[U]): seq[T]	
loopy	cxglobal.html#loopy.t,T,untyped	cxglobal: loopy[T](ite: T; st: untyped)	
loopy2	cxglobal.html#loopy2.t,int,int,untyped	cxglobal: loopy2(mi: int = 0; ma: int = 5; st: untyped)	
fromCString	cxglobal.html#fromCString,pointer,int	cxglobal: fromCString(p: pointer; len: int): string	
streamFile	cxglobal.html#streamFile,string,FileMode	cxglobal: streamFile(filename: string; mode: FileMode): FileStream	
uniform	cxglobal.html#uniform,float,float	cxglobal: uniform(a, b: float): float	
sampleSeq	cxglobal.html#sampleSeq,seq[T][T],int,int	cxglobal: sampleSeq[T](x: seq[T]; a: int; b: int): seq[T]	
tupleToStr	cxglobal.html#tupleToStr	cxglobal: tupleToStr(xs: tuple): string	
colPaletteIndexer	cxglobal.html#colPaletteIndexer.t,seq[T][string]	cxglobal: colPaletteIndexer(colx: seq[string]): auto	
colPaletteLen	cxglobal.html#colPaletteLen.t,string	cxglobal: colPaletteLen(coltype: string): auto	
colPalette	cxglobal.html#colPalette.t,string,int	cxglobal: colPalette(coltype: string; n: int): auto	
colorsPalette	cxglobal.html#colorsPalette.t,string	cxglobal: colorsPalette(coltype: string): auto	
randPastelCol	cxglobal.html#randPastelCol.t	cxglobal: randPastelCol(): string	
upperCase	cxglobal.html#upperCase.t,string	cxglobal: upperCase(s: string): string	
lowerCase	cxglobal.html#lowerCase.t,string	cxglobal: lowerCase(s: string): string	
currentLine	cxglobal.html#currentLine.t	cxglobal: currentLine()	
hdx	cxglobal.html#hdx.t,typed,string,int,int	cxglobal: hdx(code: typed; frm: string = &quot;+&quot;; width: int = tw; nxpos: int = 0): typed	
