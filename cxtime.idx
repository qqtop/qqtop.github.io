long	cxtime.html#long	cxTz.long	
short	cxtime.html#short	cxTz.short	
cxTz	cxtime.html#cxTz	cxtime: cxTz	
CxTimer	cxtime.html#CxTimer	cxtime: CxTimer	
Cxtimerres	cxtime.html#Cxtimerres	cxtime: Cxtimerres	
Cxcounter	cxtime.html#Cxcounter	cxtime: Cxcounter	
cxLocal	cxtime.html#cxLocal.t	cxtime: cxLocal(): string	
cxNow	cxtime.html#cxNow.t	cxtime: cxNow(): string	
cxToday	cxtime.html#cxToday.t	cxtime: cxToday(): string	
cxTime	cxtime.html#cxTime.t	cxtime: cxTime(): string	
cxDateTime	cxtime.html#cxDateTime.t	cxtime: cxDateTime(): string	
cxDuration	cxtime.html#cxDuration,,	cxtime: cxDuration(tstart: int | float; tend: int | float): string	
cxTimeZone	cxtime.html#cxTimeZone,cxTz	cxtime: cxTimeZone(amode: cxTz = long): string	
toDateTime	cxtime.html#toDateTime,string	cxtime: toDateTime(date: string = &quot;2000-01-01&quot;): DateTime	
epochSecs	cxtime.html#epochSecs,string	cxtime: epochSecs(date: string = &quot;2000-01-01&quot;): auto	
sleepy	cxtime.html#sleepy,T	cxtime: sleepy[T: float | int](secs: T)	
validDate	cxtime.html#validDate,string	cxtime: validDate(adate: string): bool	
day	cxtime.html#day,string	cxtime: day(aDate: string): string	
month	cxtime.html#month,string	cxtime: month(aDate: string): string	
year	cxtime.html#year,string	cxtime: year(aDate: string): string	
compareDates	cxtime.html#compareDates,string,string	cxtime: compareDates(startDate, endDate: string): int	
plusDays	cxtime.html#plusDays,string,int	cxtime: plusDays(aDate: string; days: int): string	
minusDays	cxtime.html#minusDays,string,int	cxtime: minusDays(aDate: string; days: int): string	
createSeqDate	cxtime.html#createSeqDate,string,string	cxtime: createSeqDate(fromDate: string; toDate: string): seq[string]	
createSeqDate	cxtime.html#createSeqDate,string,int	cxtime: createSeqDate(fromDate: string; days: int = 1): seq[string]	
getRndDate	cxtime.html#getRndDate,int,int	cxtime: getRndDate(minyear: int = parseInt(year(getDateStr())) - 50;\n           maxyear: int = parseInt(year(getDateStr())) + 50): string	
printTimeMsg	cxtime.html#printTimeMsg,string,int	cxtime: printTimeMsg(atext: string = cxTime; xpos: int = 1): string	
printLnTimeMsg	cxtime.html#printLnTimeMsg,string,int	cxtime: printLnTimeMsg(atext: string = cxTime; xpos: int = 1): string	
printDTimeMsg	cxtime.html#printDTimeMsg,string,int	cxtime: printDTimeMsg(atext: string = $toTime(now()); xpos: int = 1): string	
printLnDTimeMsg	cxtime.html#printLnDTimeMsg,string,int	cxtime: printLnDTimeMsg(atext: string = $toTime(now()); xpos: int = 1): string	
printDateMsg	cxtime.html#printDateMsg,string,int	cxtime: printDateMsg(atext: string = getDateStr(); xpos: int = 1): string	
printLnDateMsg	cxtime.html#printLnDateMsg,string,int	cxtime: printLnDateMsg(atext: string = getDateStr(); xpos: int = 1): string	
cxtimerresults	cxtime.html#cxtimerresults	cxtime: cxtimerresults	
newCxtimer	cxtime.html#newCxtimer,string	cxtime: newCxtimer(aname: string = &quot;cxtimer&quot;): ref (CxTimer)	
resetTimer	cxtime.html#resetTimer,ref.	cxtime: resetTimer(co: ref (CxTimer))	
startTimer	cxtime.html#startTimer,ref.	cxtime: startTimer(co: ref (CxTimer))	
lapTimer	cxtime.html#lapTimer,ref.	cxtime: lapTimer(co: ref (CxTimer)): auto	
stopTimer	cxtime.html#stopTimer,ref.	cxtime: stopTimer(co: ref (CxTimer))	
duration	cxtime.html#duration,ref.	cxtime: duration(co: ref (CxTimer)): float	
saveTimerResults	cxtime.html#saveTimerResults,ref.	cxtime: saveTimerResults(b: ref (CxTimer))	
showTimerResults	cxtime.html#showTimerResults,string	cxtime: showTimerResults(aname: string)	
showTimerResults	cxtime.html#showTimerResults	cxtime: showTimerResults()	
clearTimerResults	cxtime.html#clearTimerResults,string,bool,int	cxtime: clearTimerResults(aname: string = &quot;&quot;; quiet: bool = true; xpos: int = 3)	
clearAllTimerResults	cxtime.html#clearAllTimerResults,bool,int	cxtime: clearAllTimerResults(quiet: bool = true; xpos: int = 3)	
